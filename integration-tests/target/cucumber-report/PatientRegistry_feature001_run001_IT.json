[
  {
    "line": 2,
    "elements": [
      {
        "line": 7,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "error_message": "cucumber.runtime.CucumberException: org.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused (Connection refused)\n\tat de.ansgarsachs.scenarios.utils.RestUtils.assertAppIsRunning(RestUtils.java:48)\n\tat java.lang.Iterable.forEach(Iterable.java:75)\n\tat de.ansgarsachs.scenarios.steps.ServiceSetupSteps.serversAreRunning(ServiceSetupSteps.java:27)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:57)\n\tat cucumber.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:50)\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:65)\n\tat cucumber.runner.TestStep.run(TestStep.java:50)\n\tat cucumber.runner.PickleStepTestStep.run(PickleStepTestStep.java:43)\n\tat cucumber.runner.TestCase.run(TestCase.java:46)\n\tat cucumber.runner.Runner.runPickle(Runner.java:50)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:68)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:23)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:144)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:65)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:174)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)\n\tat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)\n",
              "duration": 408224445,
              "status": "failed"
            },
            "line": 8,
            "name": "Servers listed in the following table are up and running",
            "match": {
              "location": "ServiceSetupSteps.serversAreRunning(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "createpatient",
                  "createprescription",
                  "listcosts",
                  "listpatients"
                ]
              }
            ],
            "keyword": "Given "
          }
        ]
      },
      {
        "start_timestamp": "2020-02-23T17:07:12.194Z",
        "line": 11,
        "name": "Create a patient and add prescriptions",
        "description": "",
        "id": "registration-of-patients;create-a-patient-and-add-prescriptions",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26797,
              "status": "skipped"
            },
            "line": 12,
            "name": "I create a new patient",
            "match": {
              "location": "AddPatientSteps.addPatient()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11297,
              "status": "skipped"
            },
            "line": 13,
            "name": "I add multiple prescriptions",
            "match": {
              "location": "AddPrescriptionSteps.addPrescriptions()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9691,
              "status": "skipped"
            },
            "line": 14,
            "name": "I should see the patients id in a list of all patients",
            "match": {
              "location": "GetPatientsSteps.patientInPatientList()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9453,
              "status": "skipped"
            },
            "line": 15,
            "name": "I should see the cumulated costs of prescriptions for that patient",
            "match": {
              "location": "GetPrescriptionsSteps.patientInPatientList()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@patient_registry"
          }
        ]
      }
    ],
    "name": "Registration of Patients",
    "description": "  This feature verifies whether a patient can be created and\n  can receive prescriptions",
    "id": "registration-of-patients",
    "keyword": "Feature",
    "uri": "file:target/parallel/features/PatientRegistry_feature001_run001_IT.feature",
    "tags": [
      {
        "name": "@patient_registry",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]